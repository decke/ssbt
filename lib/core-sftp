#!/bin/sh
#
# Copyright 2018 Bernhard Froehlich <decke@bluelife.at>
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# Transfer files from a remote location via sftp
#
core::sftp::pull(){
    local _host _staging_dir _file _remote_file _local_user _local_group
    local _user _remote_dir
    local _g_user _g_remote_dir
    local _sha256bin

    _host="$1"

    config::core::get "_staging_dir" "staging_dir" "/home/backup/staging"
    config::core::get "_local_user" "local_user" "backup"
    config::core::get "_local_group" "local_group" "backup"

    config::core::get "_g_user" "remote_user" "backup"
    config::get "_user" "user" ${_g_user}

    config::core::get "_g_remote_dir" "remote_dir" "/data"
    config::get "_remote_dir" "remote_dir" ${_g_remote_dir}

    if [ -n `which sha256 sha256sum 2>/dev/null` ] ; then
        _sha256bin=`which sha256 sha256sum 2>/dev/null`
    fi

    rm -f ${_staging_dir}/* || util::err "unable to clean staging directory ${_staging_dir}"

    util::log "${_host}" "checking ${_remote_dir} on ${_host}"

    for _remote_file in `echo "ls ${_remote_dir}" | \
        sftp -qb - "${_user}@${_host}" | grep -v "sftp>" | grep "^${_remote_dir}" `
    do
        _file="${_staging_dir}/${_remote_file##*/}"

        util::log "${_host}" "copying ${_file} to ${_staging_dir}"
        echo "get ${_remote_file} ${_staging_dir}/" | sftp -qfb - "${_user}@${_host}" \
            || util::log "${_host}" "sftp get ${_remote_file} failed"

        if [ -n "${_sha256bin}" ]; then
            util::log "${_host}" "generating sha256 checksum file"
            ${_sha256bin} "${_file}" > "${_file}.sha256" \
                || util::log "${_host}" "sha256 ${_file} failed"
        fi

        util::log "${_host}" "moving ${_file} to ${ssbt_dir}/${_host}"
        chown ${_local_user}:${_local_group} "${_staging_dir}"/* \
            || util::log "${_host}" "chown ${_local_user}:${local_group} failed on ${_staging_dir}"

        mv -n "${_file}" "${ssbt_dir}/${_host}" \
            || util::log "${_host}" "Moving ${_file} to ${ssbt_dir}/${_host} failed"

        if [ -n "${_sha256bin}" ]; then
            mv -n "${_file}.sha256" "${ssbt_dir}/${_host}" \
                || util::log "${_host}" "Moving ${_file}.sha256 to ${ssbt_dir}/${_host} failed"
        fi

        util::log "${_host}" "removing ${_remote_file} on ${_host}"
        echo "rm ${_remote_file}" | sftp -qb - "${_user}@${_host}" \
            || util::log "${_host}" "sftp rm ${_remote_file} failed"
    done
}

# List local backed up files (youngest first)
#
core::sftp::list(){
    local _host="$1" _file _timestamp

    ls -1r "${ssbt_dir}/${_host}" | grep -v ".sha256" 2>/dev/null | \
    while read _file; do
        _timestamp=${_file##*-}
        _timestamp=${_timestamp%%.*}

        printf "%s^%s\n" "${_file}" "${_timestamp}"
    done
}

# Remove files from archive
#
core::sftp::remove(){
    local _host="$1" _file="$2"

    rm "${_file}"

    if [ -f "${_file}.sha256" ]; then
        _file="${_file}.sha256"
        rm "${_file}" || util::err "Unable to remove ${_file}"
    fi
}
