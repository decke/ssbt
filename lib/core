#!/bin/sh
#
# Copyright 2018 Bernhard Froehlich <decke@bluelife.at>
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# 'ssbt cron'
#
#
core::cron(){
    core::pull >/dev/null
    core::clean >/dev/null

    if [ `core::_status "" "y" | tail -n +2 | wc -l` -gt 0 ]; then
        core::_status "" "y"
    fi
}

# 'ssbt clean'
# Cleanup archive from old backups
#
core::clean(){
    local _host _filter _type _file _tmp _index
    local _keepdaily _g_keepdaily _keepweekly _g_keepweekly

    _filter="$1"

    config::core::get "_g_keepdaily" "keep_daily" "3"
    config::core::get "_g_keepweekly" "keep_weekly" "2"

    ls -1 "${ssbt_dir}" 2>/dev/null | \
    while read _host; do
        [ -n "${_filter}" -a "${_filter}" != "${_host}" ] && continue

        config::load "${_host}"
        config::get "_type" "type" "sftp"
        config::get "_keepdaily" "keep_daily" ${_g_keepdaily}
        config::get "_keepweekly" "keep_weekly" ${_g_keepweekly}

        _keepdaily=`expr ${_keepdaily} + 1`

        [ "${_type}" = "manual" ] && continue

        for _file in `ls -1r "${ssbt_dir}/${_host}/" | grep -v ".sha256" | tail -n +${_keepdaily} 2>/dev/null`
        do
            _file="${ssbt_dir}/${_host}/${_file}"

            if [ "${_keepweekly}" -gt 0 ]; then
                for _index in `seq 1 ${_keepweekly}`
                do
                    _tmp=`find "${ssbt_dir}/${_host}" -type f -mtime +${_index}w | grep -v ".sha256" | sort -r | head -n 1`
                    if [ "${_tmp}" = "${_file}" ]; then
                        util::log "${_host}" "Keep weekly backup ${_file}"
                        continue 2
                    fi
                done
            fi

            util::log "${_host}" "Removing ${_file}"
            rm "${_file}" || util::err "Unable to remove ${_file}"

            if [ -f "${_file}.sha256" ]; then
                _file="${_file}.sha256"
                util::log "${_host}" "Removing ${_file}"
                rm "${_file}" || util::err "Unable to remove ${_file}"
            fi
        done
    done
}

# 'ssbt status'
# wrapper to list hosts and their backup status or details
# about a single host
#
core::status(){
    local _filter="$1" _outdated_only="$2"

    if [ -n "${_filter}" ]; then
        core::_statusdetails "${_filter}"
    else
        core::_status "${_outdated_only}"
    fi
}

# lists all hosts and their backup status
#
core::_status(){
    local _outdated_only="$1"
    local _host _last_backup _last_date _date_diff
    local _format="%s^%b\n"
    local _date_format="%Y/%m/%d %H:%M"
    local _g_datediff_max _datediff_max

    config::core::get "_g_datediff_max" "maxage" "86400"

    # pass everything below here to column(1)
    {
        printf "${_format}" "NAME" "LAST BACKUP"

        ls -1 "${ssbt_dir}" 2>/dev/null | \
        while read _host; do
            config::load "${_host}"
            config::get "_datediff_max" "maxage" ${_g_datediff_max}

            _last_backup=`ls -1r "${ssbt_dir}/${_host}" | grep -v ".sha256" | head -1 2>/dev/null`
            if [ -n "${_last_backup}" ] ; then
                _last_backup=${_last_backup##*-}
                _last_backup=${_last_backup%%.*}
                _last_date=`date -j ${_last_backup} +"${_date_format}"`

                _date_diff=`util::datediff "${_last_backup}"`

                if [ ${_date_diff} -gt ${_datediff_max} ]; then
                    _last_date="\033[0;31m${_last_date}\033[0m"
                else
                    _last_date="\033[0;32m${_last_date}\033[0m"
                fi
            else
                _date_diff=0
                _last_date="none"
            fi

            if [ -z "${_outdated_only}" -o ${_date_diff} -gt ${_datediff_max} ]; then
                printf "${_format}" "${_host}" "${_last_date}"
            fi
        done
    } | column -ts^
}

# lists details about a single host
#
core::_statusdetails(){
    local _host="$1"
    local _type _file _filedate _timestamp _timestampf
    local _format="%s^%s\n" _date_format="%Y/%m/%d %H:%M"

    [ ! -d "${ssbt_dir}/${_filter}" ] && util::err "Host ${_filter} does not exist"

    config::load "${_host}"
    config::get "_type" "type" "sftp"

    # pass everything below here to column(1)
    {
        printf "${_format}" "CONFIG" "VALUE"

        printf "${_format}" "host" "${_host}"
        printf "${_format}" "type" "${_type}"
    } | column -ts^

    printf "\n"

    # pass everything below here to column(1)
    {
        printf "%s^%s^%s\n" "BACKUP FILE" "BACKUP DATE" "FILE DATE"

        ls -1r "${ssbt_dir}/${_host}" | grep -v ".sha256" 2>/dev/null | \
        while read _file; do
            _timestamp=${_file##*-}
            _timestamp=${_timestamp%%.*}
            _timestampf=`date -j ${_timestamp} +"${_date_format}"`
            _filedate=`date -j -r "${ssbt_dir}/${_host}/${_file}" +"${_date_format}"`

            printf "%s^%s^%s\n" "${_file}" "${_timestampf}" "${_filedate}"
        done
    } | column -ts^
}

## 'ssbt pull'
#
#
core::pull(){
    local _host _filter _type

    _filter="$1"

    ls -1 "${ssbt_dir}" 2>/dev/null | \
    while read _host; do
        [ -n "${_filter}" -a "${_filter}" != "${_host}" ] && continue

        config::load "${_host}"
        config::get "_type" "type" "sftp"

        case "${_type}" in
            "sftp")
                core::_pullsftp "${_host}"
            ;;
            "manual")
                util::log "${_host}" "ignoring ${_host} because type is manual"
            ;;
            *)
                util::log "${_host}" "Unknown backup type ${_type} for host ${_host}"
            ;;
        esac
    done
}

core::_pullsftp(){
    local _host _staging_dir _file _remote_file _local_user _local_group
    local _user _remote_dir
    local _g_user _g_remote_dir
    local _sha256bin

    _host="$1"

    config::core::get "_staging_dir" "staging_dir" "/home/backup/staging"
    config::core::get "_local_user" "local_user" "backup"
    config::core::get "_local_group" "local_group" "backup"

    config::core::get "_g_user" "remote_user" "backup"
    config::get "_user" "user" ${_g_user}

    config::core::get "_g_remote_dir" "remote_dir" "/data"
    config::get "_remote_dir" "remote_dir" ${_g_remote_dir}

    if [ -n `which sha256 sha256sum 2>/dev/null` ] ; then
        _sha256bin=`which sha256 sha256sum 2>/dev/null`
    fi

    rm -f ${_staging_dir}/* || util::err "unable to clean staging directory ${_staging_dir}"

    util::log "${_host}" "checking ${_remote_dir} on ${_host}"

    for _remote_file in `echo "ls ${_remote_dir}" | \
        sftp -qb - "${_user}@${_host}" | grep -v "sftp>" | grep "^${_remote_dir}" `
    do
        _file="${_staging_dir}/${_remote_file##*/}"

        util::log "${_host}" "copying ${_file} to ${_staging_dir}"
        echo "get ${_remote_file} ${_staging_dir}/" | sftp -qfb - "${_user}@${_host}" \
            || util::log "${_host}" "sftp get ${_remote_file} failed"

        if [ -n "${_sha256bin}" ]; then
            util::log "${_host}" "generating sha256 checksum file"
            ${_sha256bin} "${_file}" > "${_file}.sha256" \
                || util::log "${_host}" "sha256 ${_file} failed"
        fi

        util::log "${_host}" "moving ${_file} to ${ssbt_dir}/${_host}"
        chown ${_local_user}:${_local_group} "${_staging_dir}"/* \
            || util::log "${_host}" "chown ${_local_user}:${local_group} failed on ${_staging_dir}"

        mv -n "${_file}" "${ssbt_dir}/${_host}" \
            || util::log "${_host}" "Moving ${_file} to ${ssbt_dir}/${_host} failed"

        if [ -n "${_sha256bin}" ]; then
            mv -n "${_file}.sha256" "${ssbt_dir}/${_host}" \
                || util::log "${_host}" "Moving ${_file}.sha256 to ${ssbt_dir}/${_host} failed"
        fi

        util::log "${_host}" "removing ${_remote_file} on ${_host}"
        echo "rm ${_remote_file}" | sftp -qb - "${_user}@${_host}" \
            || util::log "${_host}" "sftp rm ${_remote_file} failed"
    done
}
