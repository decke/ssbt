#!/bin/sh
#
# Copyright 2018 Bernhard Froehlich <decke@bluelife.at>
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# 'ssbt cron'
# Command to run periodically (equivalent to pull + clean + status -i)
#
core::cron(){
    core::pull >/dev/null
    core::clean >/dev/null

    if [ `core::status "-i" | tail -n +2 | wc -l` -gt 0 ]; then
        core::status "-i"
    fi
}

# 'ssbt clean'
# Cleanup archive from old backups
#
core::clean(){
    local _host _filter _type _backup _timestamp _datediff
    local _keepdaily _g_keepdaily _keepweekly _g_keepweekly
    local _limitdaily _limitweekly

    _filter="$1"

    config::core::get "_g_keepdaily" "keep_daily" "3"
    config::core::get "_g_keepweekly" "keep_weekly" "2"

    ls -1 "${ssbt_dir}" 2>/dev/null | \
    while read _host; do
        [ -n "${_filter}" -a "${_filter}" != "${_host}" ] && continue

        config::load "${_host}"
        config::get "_type" "type" "sftp"
        config::get "_keepdaily" "keep_daily" ${_g_keepdaily}
        config::get "_keepweekly" "keep_weekly" ${_g_keepweekly}

        core::${_type}::list "${_host}" | \
        while read _line; do
            _backup=`echo "${_line}" | cut -d^ -f1`
            _timestamp=`echo "${_line}" | cut -d^ -f2`

            _datediff=`util::datediff "${_timestamp}"`
            _limitdaily=`expr 86400 '*' '(' ${_keepdaily} + 1 ')'`
            _limitweekly=`expr 604800 '*' '(' ${_keepweekly} + 1 ')'`

            if [ "${_datediff}" -lt "${_limitdaily}" ]; then
                util::log "${_host}" "Keep daily backup ${_backup}"
                continue
            fi

            if [ ${_datediff} -gt 604800 -a ${_datediff} -lt ${_limitweekly} ]; then
                util::log "${_host}" "Keep weekly backup ${_backup}"
                continue
            fi

            util::log "${_host}" "Removing ${_backup} from ${_host}"
            core::${_type}::remove "${_host}" "${_backup}" || \
                util::err "Unable to remove ${_backup}"
        done
    done
}

# 'ssbt pull'
# Pull backups from a remote host
#
core::pull(){
    local _host _filter _type

    _filter="$1"

    ls -1 "${ssbt_dir}" 2>/dev/null | \
    while read _host; do
        [ -n "${_filter}" -a "${_filter}" != "${_host}" ] && continue

        config::load "${_host}"
        config::get "_type" "type" "sftp"

        core::${_type}::pull "${_host}"
    done
}

# 'ssbt status'
# Lists all hosta and their backup status
#
core::status(){
    local _outdated_only
    local _host _type _line _backup _timestamp _date_diff _date_str
    local _g_datediff_max _datediff_max

    [ "$1" = "-i" ] && _outdated_only="y"

    config::core::get "_g_datediff_max" "maxage" "86400"

    # pass everything below here to column(1)
    {
        printf "%s^%b\n" "NAME" "LAST BACKUP"

        ls -1 "${ssbt_dir}" 2>/dev/null | \
        while read _host; do
            config::load "${_host}"
            config::get "_type" "type" "sftp"
            config::get "_datediff_max" "maxage" ${_g_datediff_max}

            _line=`core::${_type}::list "${_host}" | head -n 1 2>/dev/null`
            if [ -n "${_line}" ] ; then
                _backup=`echo "${_line}" | cut -d^ -f1`
                _timestamp=`echo "${_line}" | cut -d^ -f2`

                _date_diff=`util::datediff "${_timestamp}"`
                _date_str=`date -j ${_timestamp} +"%Y/%m/%d %H:%M"`

                if [ ${_date_diff} -gt ${_datediff_max} ]; then
                    _date_str="\033[0;31m${_date_str}\033[0m"
                else
                    _date_str="\033[0;32m${_date_str}\033[0m"
                fi
            else
                _diff_diff=0
                _date_str="none"
            fi

            if [ -z "${_outdated_only}" -o ${_date_diff} -gt ${_datediff_max} ]; then
                printf "%s^%b\n" "${_host}" "${_date_str}"
            fi
        done
    } | column -ts^
}

# lists details about a single host
#
core::details(){
    local _host="$1" _type
    local _line _backup _timestamp

    [ -z "${_host}" ] && util::err "Parameter host needs to be set"
    [ ! -d "${ssbt_dir}/${_host}" ] && util::err "Host ${_host} does not exist"

    config::load "${_host}"
    config::get "_type" "type" "sftp"

    # pass everything below here to column(1)
    {
        printf "%s^%s\n" "CONFIG" "VALUE"

        printf "%s^%s\n" "host" "${_host}"
        printf "%s^%s\n" "type" "${_type}"
    } | column -ts^

    printf "\n"

    # pass everything below here to column(1)
    {
        printf "%s^%s\n" "BACKUP" "BACKUP DATE"

        core::${_type}::list "${_host}" | \
        while read _line; do
            _backup=`echo "${_line}" | cut -d^ -f1`
            _timestamp=`echo "${_line}" | cut -d^ -f2`

            printf "%s^%s\n" "${_backup}" "`date -j ${_timestamp} +"%Y/%m/%d %H:%M"`"
        done
    } | column -ts^
}
