#!/bin/sh
#-------------------------------------------------------------------------+
# Copyright (C) 2016 Matt Churchyard (churchers@gmail.com)
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# 'ssbt list'
# list hosts
#
core::list(){
    local _host _keep
    local _g_keep
    local _format="%s^%s\n"

    config::core::get "_g_keep" "keep" "3"

    # pass everything below here to column(1)
    {
        printf "${_format}" "NAME" "KEEP-ARCHIVES"

        ls -1 "${ssbt_dir}" 2>/dev/null | \
        while read _host; do
            config::load "${ssbt_dir}/${_host}/${_host}.conf"
            config::get "_keep" "keep" ${_g_keep}

            printf "${_format}" "${_host}" "${_keep}"
        done
    } | column -ts^
}

## 'ssbt pull'
#
#
core::pull(){
    local _host _filter

    _filter="$1"

    ls -1 "${ssbt_dir}" 2>/dev/null | \
    while read _host; do
        [ -n "${_filter}" -a "${_filter}" != "${_host}" ] && continue

        core::_pull "${_host}"
    done
}

core::_pull(){
    local _host _staging_dir _file _remote_file _local_user _local_group
    local _user _remote_dir
    local _g_user _g_remote_dir

    _host="$1"

    config::core::get "_staging_dir" "staging_dir" "/home/backup/staging"
    config::core::get "_local_user" "local_user" "backup"
    config::core::get "_local_group" "local_group" "backup"

    config::core::get "_g_user" "user" "backup"
    config::get "_user" "user" ${_g_user}

    config::core::get "_g_remote_dir" "remote_dir" "/data"
    config::get "_remote_dir" "remote_dir" ${_g_remote_dir}

    rm -f ${_staging_dir}/* || util::err "unable to clean staging directory ${_staging_dir}"

    util::log "${_host}" "checking ${_remote_dir} on ${_host}"

    for _remote_file in `echo "ls ${_remote_dir}" | \
        sftp -qb - "${_user}@${_host}" | grep -v "sftp>" | grep "^${_remote_dir}" `
    do
        _file="${_staging_dir}/${_remote_file##*/}"

        util::log "${_host}" "copying ${_file} to ${_staging_dir}"
        echo "get ${_remote_file} ${_staging_dir}/" | sftp -qfb - "${_user}@${_host}" \
            || util::log "${_host}" "sftp get ${_remote_file} failed"

        util::log "${_host}" "generating sha256 checksum file"
        sha256 "${_file}" > "${_file}.sha256" \
            || util::log "${_host}" "sha256 ${_file} failed"

        util::log "${_host}" "moving ${_file} to ${ssbt_dir}/${_host}"
        chown ${_local_user}:${_local_group} "${_staging_dir}"/* \
            || util::log "${_host}" "chown ${_local_user}:${local_group} failed on ${_staging_dir}"

        mv -n "${_file}" "${ssbt_dir}/${_host}" \
            || util::log "${_host}" "Moving ${_file} to ${ssbt_dir}/${_host} failed"

        mv -n "${_file}.sha256" "${ssbt_dir}/${_host}" \
            || util::log "${_host}" "Moving ${_file}.sha256 to ${ssbt_dir}/${_host} failed"

        util::log "${_host}" "removing ${_remote_file} on ${_host}"
        echo "rm ${_remote_file}" | sftp -qb - "${_user}@${_host}" \
            || util::log "${_host}" "sftp rm ${_remote_file} failed"
    done
}
